name: Deploy to AWS Fargate

on:
  workflow_dispatch:

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: finance-tracker
  ECS_SERVICE: finance-tracker-service
  ECS_CLUSTER: finance-tracker-cluster
  ECS_TASK_DEFINITION: finance-tracker

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get AWS Account ID
      id: account
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "AWS Account ID: $ACCOUNT_ID"

    - name: Get RDS endpoint
      id: rds-endpoint
      run: |
        RDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier finance-tracker-db --query 'DBInstances[0].Endpoint.Address' --output text)
        echo "rds-endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
        echo "RDS Endpoint: $RDS_ENDPOINT"

    - name: Create/Update database credentials in SSM
      run: |
        # Store RDS endpoint
        aws ssm put-parameter \
          --name "/finance-tracker/DB_HOST" \
          --value "${{ steps.rds-endpoint.outputs.rds-endpoint }}" \
          --type "String" \
          --overwrite
        
        # Store DB password (create if not exists)
        aws ssm put-parameter \
          --name "/finance-tracker/DB_PASSWORD" \
          --value "FinanceTracker2024" \
          --type "SecureString" \
          --overwrite || \
        aws ssm put-parameter \
          --name "/finance-tracker/DB_PASSWORD" \
          --value "FinanceTracker2024" \
          --type "SecureString"

    - name: Create/Update APP_KEY in SSM
      run: |
        # Check if APP_KEY exists, if not create one
        aws ssm get-parameter --name "/finance-tracker/APP_KEY" --with-decryption || \
        aws ssm put-parameter \
          --name "/finance-tracker/APP_KEY" \
          --value "base64:$(openssl rand -base64 32)" \
          --type "SecureString"

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Render ECS task definition
      id: task-def
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ACCOUNT_ID: ${{ steps.account.outputs.account-id }}
      run: |
        cat > task-definition.json << EOF
        {
          "family": "${{ env.ECS_TASK_DEFINITION }}",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::${ACCOUNT_ID}:role/ecsTaskExecutionRole",
          "taskRoleArn": "arn:aws:iam::${ACCOUNT_ID}:role/ecsTaskRole",
          "containerDefinitions": [
            {
              "name": "finance-tracker",
              "image": "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
              "portMappings": [
                {
                  "containerPort": 80,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "environment": [
                {
                  "name": "APP_ENV",
                  "value": "production"
                },
                {
                  "name": "APP_DEBUG",
                  "value": "false"
                },
                {
                  "name": "APP_URL",
                  "value": "https://finance-tracker.pjholt.com"
                },
                {
                  "name": "ASSET_URL",
                  "value": "https://finance-tracker.pjholt.com"
                },
                {
                  "name": "FORCE_SCHEME",
                  "value": "https"
                },
                {
                  "name": "DB_CONNECTION",
                  "value": "mysql"
                },
                {
                  "name": "DB_PORT",
                  "value": "3306"
                },
                {
                  "name": "DB_DATABASE",
                  "value": "finance_tracker"
                },
                {
                  "name": "DB_USERNAME",
                  "value": "admin"
                }
              ],
              "secrets": [
                {
                  "name": "APP_KEY",
                  "valueFrom": "/finance-tracker/APP_KEY"
                },
                {
                  "name": "DB_HOST",
                  "valueFrom": "/finance-tracker/DB_HOST"
                },
                {
                  "name": "DB_PASSWORD",
                  "valueFrom": "/finance-tracker/DB_PASSWORD"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/finance-tracker",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Deployment completed
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🗄️ Database migrations will run automatically on container startup"
        echo "🌐 Application will be available once the container is healthy" 